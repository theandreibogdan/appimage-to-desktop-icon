#!/usr/bin/env bash

# Set strict error handling
set -euo pipefail

# Version
VERSION="1.2.3"

# Color definitions
setup_colors() {
    # Only use colors if connected to a terminal
    if [ -t 1 ]; then
        RED=$(printf '\033[31m')
        GREEN=$(printf '\033[32m')
        YELLOW=$(printf '\033[33m')
        BLUE=$(printf '\033[34m')
        BOLD=$(printf '\033[1m')
        RESET=$(printf '\033[0m')
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        RESET=""
    fi
}

# Initialize colors
setup_colors

# Base directories following XDG specification
USER_APPS_DIR="/opt"
USER_ICONS_DIR="/opt"
USER_DESKTOP_DIR="/usr/share/applications"

ROOT_APPS_DIR="/opt"
ROOT_ICONS_DIR="/opt"
ROOT_DESKTOP_DIR="/usr/share/applications"

# Function to display usage information
show_help() {
    printf "\n"
    printf "%s\n" "AppImage to Desktop Icon - Version ${VERSION}"
    printf "\n"
    printf "%s\n" "${YELLOW}Usage:${RESET}"
    printf "    appimage [OPTIONS] <path_to_appimage> <path_to_icon>\n"
    printf "    appimage remove <app_name>\n"
    printf "    appimage list\n"
    printf "    appimage uninstall\n"
    printf "\n"
    printf "%s\n" "${YELLOW}Options:${RESET}"
    printf "    -h, --help     Show this help message\n"
    printf "    -v, --version  Show version information\n"
    printf "    --root         Install the application system-wide (requires sudo)\n"
    printf "    remove         Remove an installed AppImage application\n"
    printf "    list           List all installed AppImage applications\n"
    printf "    uninstall      Remove the appimage tool from your system\n"
    printf "\n"
    printf "%s\n" "${YELLOW}Examples:${RESET}"
    printf "    appimage ~/Downloads/MyApp.AppImage ~/Downloads/icon.png     # User installation\n"
    printf "    appimage --root ~/Downloads/MyApp.AppImage ~/Downloads/icon.png  # System-wide installation\n"
    printf "    appimage list\n"
    printf "    appimage remove MyApp\n"
    printf "    sudo appimage --root remove MyApp\n"
    printf "    appimage uninstall\n"
    printf "\n"
    printf "%s\n" "${YELLOW}Description:${RESET}"
    printf "    This tool integrates AppImage applications into your Linux desktop environment\n"
    printf "    by creating the necessary desktop entries and handling icon integration.\n"
    printf "\n"
}

# Function to show version
show_version() {
    printf "%s\n" "${BLUE}AppImage to Desktop Icon${RESET} - Version ${VERSION}"
}

# Function to log messages
log() {
    local level=$1
    shift
    case "$level" in
        "error")   printf "%s%s%s\n" "${RED}[ERROR]${RESET}" " " "$*" >&2 ;;
        "info")    printf "%s%s%s\n" "${GREEN}[INFO]${RESET}" " " "$*" ;;
        "warning") printf "%s%s%s\n" "${YELLOW}[WARNING]${RESET}" " " "$*" ;;
    esac
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log "error" "Root installation requires sudo privileges. Please run with: sudo appimage --root ..."
        exit 1
    fi
}

# Function to validate file existence and permissions
validate_file() {
    local file=$1
    local type=$2
    
    if [[ ! -f "$file" ]]; then
        log "error" "The $type file '$file' does not exist."
        exit 1
    fi
    
    if [[ ! -r "$file" ]]; then
        log "error" "The $type file '$file' is not readable."
        exit 1
    fi
}

# Function to create necessary directories
create_directories() {
    mkdir -p "${ROOT_APPS_DIR}"
    mkdir -p "${ROOT_ICONS_DIR}/scalable/apps"
    mkdir -p "${ROOT_ICONS_DIR}/128x128/apps"
    mkdir -p "${ROOT_DESKTOP_DIR}"
    
    chown root:root "${ROOT_APPS_DIR}"
    chown -R root:root "${ROOT_ICONS_DIR}"
    chown root:root "${ROOT_DESKTOP_DIR}"
    
    chmod 755 "${ROOT_APPS_DIR}"
    chmod -R 755 "${ROOT_ICONS_DIR}"
    chmod 755 "${ROOT_DESKTOP_DIR}"
}

# Function to get icon size and format
get_icon_info() {
    local icon_path=$1
    local mime_type
    mime_type=$(file --mime-type -b "$icon_path")
    
    case "$mime_type" in
        "image/svg"*) echo "scalable" ;;
        "image/png"|"image/jpeg") 
            # For now, we'll put all bitmap images in 128x128
            echo "128x128" ;;
        *)
            log "error" "Unsupported icon format: $mime_type"
            exit 1 ;;
    esac
}

# Function to install the AppImage
install_appimage() {
    local appimage_path=$1
    local app_name
    
    # Remove .AppImage extension if present, but handle cases where it might not be
    app_name=$(basename "$appimage_path" | sed 's/\.AppImage$//i')
    local target_path="/opt/${app_name}.AppImage"  # Consistent .AppImage extension
    
    # Always require root permissions
    if [[ $EUID -ne 0 ]]; then
        exec sudo "$0" "$@"
    fi
    
    # Ensure target directory exists and has correct permissions
    mkdir -p "/opt"
    
    # Copy with preserved permissions
    cp -p "$appimage_path" "$target_path"
    chmod 755 "$target_path"  # Ensure executable permission
    echo "$target_path"
}

# Function to install the icon
install_icon() {
    local icon_path=$1
    local app_name=$2
    local icon_ext="${icon_path##*.}"
    local target_path="/opt/${app_name}.${icon_ext}"
    
    # Always require root permissions
    if [[ $EUID -ne 0 ]]; then
        exec sudo "$0" "$@"
    fi
    
    cp "$icon_path" "$target_path"
    echo "$target_path"
}

# Function to create desktop entry
create_desktop_entry() {
    local app_path=$1
    local icon_path=$2
    local app_name
    
    app_name=$(basename "$app_path" .AppImage)
    
    # Create system-wide desktop entry
    local system_desktop_file="/usr/share/applications/${app_name}.desktop"
    
    # Get application name from AppImage if possible
    local display_name
    if [ -x "$app_path" ]; then
        display_name=$("$app_path" --appimage-offset >/dev/null 2>&1 && "$app_path" --name 2>/dev/null || echo "$app_name")
    else
        display_name="$app_name"
    fi
    
    # Ensure parent directories exist
    mkdir -p "/usr/share/applications"
    mkdir -p "${HOME}/.local/share/applications"
    
    # Create the desktop entry content
    cat > "$system_desktop_file" << EOF
[Desktop Entry]
Name=${display_name}
Exec=${app_path}
Icon=${icon_path}
Type=Application
Categories=Development;
Terminal=false
StartupNotify=true
Version=1.0
EOF

    chmod 644 "$system_desktop_file"  # Correct permissions for .desktop files

    # Create user desktop entry
    local user_desktop_dir="${HOME}/.local/share/applications"
    cp "$system_desktop_file" "$user_desktop_dir/"
    chown "$SUDO_USER:$(id -g "$SUDO_USER")" "$user_desktop_dir/${app_name}.desktop"

    # Update desktop database for both locations
    update-desktop-database "/usr/share/applications" &>/dev/null || true
    update-desktop-database "$user_desktop_dir" &>/dev/null || true

    # Refresh desktop environment
    refresh_desktop_environment
}

# Function to list installed applications
list_applications() {
    printf "\n%s\n" "${BLUE}Installed AppImage Applications:${RESET}"
    printf "%s\n" "${YELLOW}Location: ${ROOT_APPS_DIR}${RESET}"
    printf "%s\n" "----------------------------------------"

    # Check .desktop files for installed applications
    if [[ -d "${ROOT_DESKTOP_DIR}" ]]; then
        while IFS= read -r -d '' desktop_file; do
            if grep -q "Exec=.*AppImage\|Exec=${ROOT_APPS_DIR}" "$desktop_file"; then
                local app_name
                app_name=$(basename "$desktop_file" .desktop)
                if [[ -f "${ROOT_APPS_DIR}/${app_name}" ]]; then
                    printf " %s\n" "$app_name"
                fi
            fi
        done < <(find "${ROOT_DESKTOP_DIR}" -name "*.desktop" -print0)
    fi

    printf "\n"
}

# Function to uninstall application
uninstall_app() {
    local app_name=$1
    local success=false
    
    # Prevent accidental removal of the tool itself
    if [[ "$app_name" == "appimage" ]]; then
        log "error" "Cannot remove the tool itself. Use 'appimage uninstall' instead."
        exit 1
    fi
    
    # Remove AppImage
    if [[ -f "/opt/${app_name}.AppImage" ]]; then
        rm -f "/opt/${app_name}.AppImage"
        success=true
        log "info" "Removed AppImage from /opt/${app_name}.AppImage"
    fi

    # Remove icon
    if [[ -f "/opt/${app_name}.png" ]]; then
        rm -f "/opt/${app_name}.png"
        success=true
        log "info" "Removed icon from /opt/${app_name}.png"
    fi
    if [[ -f "/opt/${app_name}.svg" ]]; then
        rm -f "/opt/${app_name}.svg"
        success=true
        log "info" "Removed icon from /opt/${app_name}.svg"
    fi

    # Remove desktop entries from both locations
    if [[ -f "/usr/share/applications/${app_name}.desktop" ]]; then
        rm -f "/usr/share/applications/${app_name}.desktop"
        success=true
        log "info" "Removed system desktop entry"
    fi
    
    if [[ -f "${HOME}/.local/share/applications/${app_name}.desktop" ]]; then
        rm -f "${HOME}/.local/share/applications/${app_name}.desktop"
        success=true
        log "info" "Removed user desktop entry"
    fi

    # Update desktop database
    if [[ "$success" == "true" ]]; then
        update-desktop-database "/usr/share/applications" &>/dev/null || true
        update-desktop-database "${HOME}/.local/share/applications" &>/dev/null || true
        log "info" "Application '${app_name}' has been removed successfully!"
    else
        log "error" "No files found for application '${app_name}'. Make sure the name is correct and it was installed with this tool."
        log "info" "Use 'appimage list' to see all installed applications."
        exit 1
    fi
}

# Function to remove the tool itself
remove_tool() {
    local script_path
    script_path=$(which appimage)
    
    if [[ -z "$script_path" ]]; then
        log "error" "Could not find the appimage tool in your PATH"
        exit 1
    fi
    
    # Check if the script is in a system directory
    if [[ "$script_path" == "/usr/"* ]] || [[ "$script_path" == "/opt/"* ]]; then
        if [[ $EUID -ne 0 ]]; then
            log "error" "The tool is installed system-wide. Please run: sudo appimage uninstall"
            exit 1
        fi
    fi
    
    # Remove the script
    rm -f "$script_path"
    log "info" "Removed appimage tool from: $script_path"
    
    # Check if we need to clean up PATH in .bashrc
    if grep -q "export PATH=\"\$PATH:${HOME}/.local/bin\"" ~/.bashrc; then
        # Only remove the PATH if .local/bin is empty
        if [[ ! -d "${HOME}/.local/bin" ]] || [[ -z "$(ls -A "${HOME}/.local/bin")" ]]; then
            sed -i '/export PATH="\$PATH:${HOME}\/.local\/bin"/d' ~/.bashrc
            log "info" "Removed .local/bin from PATH in .bashrc"
            log "info" "Please run: source ~/.bashrc to apply changes"
        fi
    fi
    
    log "info" "The appimage tool has been successfully removed from your system."
}

# Function to detect desktop environment
detect_desktop_environment() {
    if [ -n "${XDG_CURRENT_DESKTOP:-}" ]; then
        echo "$XDG_CURRENT_DESKTOP"
    elif [ -n "${DESKTOP_SESSION:-}" ]; then
        echo "$DESKTOP_SESSION"
    else
        echo "unknown"
    fi
}

# Function to refresh desktop environment
refresh_desktop_environment() {
    local de
    de=$(detect_desktop_environment | tr '[:upper:]' '[:lower:]')
    
    case "$de" in
        *kde*|*plasma*)
            if command -v plasmashell >/dev/null 2>&1; then
                killall plasmashell 2>/dev/null
                nohup plasmashell >/dev/null 2>&1 &
            fi
            ;;
        *gnome*|*unity*)
            if command -v gnome-shell >/dev/null 2>&1; then
                killall -HUP gnome-shell 2>/dev/null
            fi
            ;;
        *xfce*)
            if command -v xfdesktop >/dev/null 2>&1; then
                xfdesktop --reload 2>/dev/null
            fi
            ;;
        *cinnamon*)
            if command -v cinnamon >/dev/null 2>&1; then
                killall -HUP cinnamon-launcher 2>/dev/null
            fi
            ;;
        *mate*)
            if command -v mate-panel >/dev/null 2>&1; then
                mate-panel --replace & 2>/dev/null
            fi
            ;;
        *)
            log "warning" "Unknown desktop environment. Manual refresh may be required."
            ;;
    esac
}

# Main script logic
main() {
    # Always require root permissions at the start
    if [[ $EUID -ne 0 ]]; then
        log "info" "Root privileges required. Requesting sudo access..."
        if ! command -v sudo >/dev/null 2>&1; then
            log "error" "sudo is not installed. Please install sudo or run this command as root."
            exit 1
        fi
        exec sudo "$0" "$@"
    fi

    # Check if no arguments provided
    if [[ $# -eq 0 ]]; then
        log "error" "No arguments provided."
        show_help
        exit 1
    fi

    # Parse command line arguments
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        list)
            list_applications
            exit 0
            ;;
        remove)
            if [[ $# -ne 2 ]]; then
                log "error" "Please provide the application name to remove."
                printf "\n%s\n" "${YELLOW}Usage:${RESET} appimage remove <app_name>"
                log "info" "Use 'appimage list' to see all installed applications."
                exit 1
            fi
            uninstall_app "$2"
            exit 0
            ;;
        uninstall)
            if [[ $# -ne 1 ]]; then
                log "error" "The uninstall command doesn't take any additional arguments."
                printf "\n%s\n" "${YELLOW}Usage:${RESET} appimage uninstall"
                exit 1
            fi
            remove_tool
            exit 0
            ;;
        *)
            # Handle installation case
            if [[ $1 == -* ]]; then
                log "error" "Unknown option: $1"
                show_help
                exit 1
            fi
            ;;
    esac

    # Installation logic
    if [[ $# -ne 2 ]]; then
        log "error" "Incorrect number of arguments for installation."
        printf "\n%s\n" "${YELLOW}Usage:${RESET} appimage <path_to_appimage> <path_to_icon>"
        exit 1
    fi

    local appimage_path=$1
    local icon_path=$2

    # Validate input files
    validate_file "$appimage_path" "AppImage"
    validate_file "$icon_path" "icon"

    # Create necessary directories
    log "info" "Creating required directories..."
    create_directories

    # Install AppImage
    log "info" "Installing AppImage..."
    local installed_app_path
    installed_app_path=$(install_appimage "$appimage_path")

    # Install icon
    log "info" "Installing icon..."
    local installed_icon_path
    installed_icon_path=$(install_icon "$icon_path" "$(basename "$appimage_path" .AppImage)")

    # Create desktop entry
    log "info" "Creating desktop entry..."
    create_desktop_entry "$installed_app_path" "$installed_icon_path"

    log "info" "Installation completed successfully!"
    log "info" "The application has been installed and should appear in your applications menu."
}

# Execute main function
main "$@" 